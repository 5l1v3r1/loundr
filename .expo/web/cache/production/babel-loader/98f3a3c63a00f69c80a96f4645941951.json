{"ast":null,"code":"import _classCallCheck from\"@babel/runtime/helpers/classCallCheck\";import _createClass from\"@babel/runtime/helpers/createClass\";import _inherits from\"@babel/runtime/helpers/inherits\";import _possibleConstructorReturn from\"@babel/runtime/helpers/possibleConstructorReturn\";import _getPrototypeOf from\"@babel/runtime/helpers/getPrototypeOf\";function _createSuper(Derived){var hasNativeReflectConstruct=_isNativeReflectConstruct();return function _createSuperInternal(){var Super=_getPrototypeOf(Derived),result;if(hasNativeReflectConstruct){var NewTarget=_getPrototypeOf(this).constructor;result=Reflect.construct(Super,arguments,NewTarget);}else{result=Super.apply(this,arguments);}return _possibleConstructorReturn(this,result);};}function _isNativeReflectConstruct(){if(typeof Reflect===\"undefined\"||!Reflect.construct)return false;if(Reflect.construct.sham)return false;if(typeof Proxy===\"function\")return true;try{Date.prototype.toString.call(Reflect.construct(Date,[],function(){}));return true;}catch(e){return false;}}import React,{Component}from'react';import StyleSheet from\"react-native-web/dist/exports/StyleSheet\";import Text from\"react-native-web/dist/exports/Text\";import View from\"react-native-web/dist/exports/View\";import{AppLoading}from'expo';var App=function(_Component){_inherits(App,_Component);var _super=_createSuper(App);function App(){var _this;_classCallCheck(this,App);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={fontsLoaded:false};return _this;}_createClass(App,[{key:\"render\",value:function render(){return React.createElement(View,{style:styles.container},React.createElement(Text,null,\"Hey App.js is here\"));}}]);return App;}(Component);var styles=StyleSheet.create({container:{flex:1,backgroundColor:'#fff',alignItems:'center',justifyContent:'center'}});export default App;","map":{"version":3,"sources":["/Users/ikramgabiyev/react-native-workspace/loundr/App.js"],"names":["React","Component","AppLoading","App","state","fontsLoaded","styles","container","StyleSheet","create","flex","backgroundColor","alignItems","justifyContent"],"mappings":"ggCACA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,C,2KAQA,OAASC,UAAT,KAA2B,MAA3B,C,GA0BMC,CAAAA,G,kSAEFC,K,CAAQ,CAEJC,WAAW,CAAE,KAFT,C,sEAMR,CAgBF,MACC,qBAAC,IAAD,EAAM,KAAK,CAAEC,MAAM,CAACC,SAApB,EACC,oBAAC,IAAD,2BADD,CADD,CAKA,C,iBA7BgBN,S,EAgClB,GAAMK,CAAAA,MAAM,CAAGE,UAAU,CAACC,MAAX,CAAkB,CAChCF,SAAS,CAAE,CACVG,IAAI,CAAE,CADI,CAEVC,eAAe,CAAE,MAFP,CAGVC,UAAU,CAAE,QAHF,CAIVC,cAAc,CAAE,QAJN,CADqB,CAAlB,CAAf,CASA,cAAeV,CAAAA,GAAf","sourcesContent":["//standard imports\nimport React, { Component } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\n//importing the entry navigator\n//import EntryNavigator from './navigation/EntryNavigator';\n\n//importing AppLoading\n//currently for uploading files in the render() in [App.js]\nimport { AppLoading } from 'expo';\n\n//importing font package\n//import * as Font from 'expo-font';\n\n/**\n * fetches all fonts;\n * returns a promise;\n * put as a prop into AppLoading component\n */\n// const fetchFonts = () => {\n//     return Font.loadAsync({\n//         //use this mostly\n//         'mont-alt-regular': require('./assets/fonts/MontserratAlternates-Regular.ttf'),\n\n//         //use this for subTitles or when regular is too thin\n//         'mont-alt-medium': require('./assets/fonts/MontserratAlternates-Medium.ttf'),\n\n//         //use this for titles\n//         'mont-alt-bold': require('./assets/fonts/MontserratAlternates-Bold.ttf'),\n//     });\n// };\n\n/**\n * Here we will have the main SwitchNavigator rendered\n */\nclass App extends Component \n{\n    state = {\n        //checks if fonts loaded\n        fontsLoaded: false,\n    };\n\n    render() \n    {\n        /**\n         * render AppLoading screen if \n         * fonts are still not loaded\n         */\n        // if (!this.state.fontsLoaded)\n        // {\n        //     return (\n        //         <AppLoading\n        //             startAsync={fetchFonts}\n        //             onFinish={() => this.setState({ fontsLoaded: true })}\n        //             onError={console.warn}\n        //         />\n        //     );\n        // }\n\n\t\treturn (\n\t\t\t<View style={styles.container}>\n\t\t\t\t<Text>Hey App.js is here</Text>\n\t\t\t</View>\n\t\t);\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#fff',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n});\n\nexport default App;"]},"metadata":{},"sourceType":"module"}