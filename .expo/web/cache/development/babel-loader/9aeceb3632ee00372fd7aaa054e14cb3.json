{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ikramgabiyev/react-native-workspace/loundr/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport EntryNavigator from \"./navigation/EntryNavigator\";\nimport { AppLoading } from 'expo';\nimport * as Font from 'expo-font';\n\nvar fetchFonts = function fetchFonts() {\n  return Font.loadAsync({\n    'mont-alt-regular': require(\"./assets/fonts/MontserratAlternates-Regular.ttf\"),\n    'mont-alt-medium': require(\"./assets/fonts/MontserratAlternates-Medium.ttf\"),\n    'mont-alt-bold': require(\"./assets/fonts/MontserratAlternates-Bold.ttf\")\n  });\n};\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      fontsLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.state.fontsLoaded) {\n        return React.createElement(AppLoading, {\n          startAsync: fetchFonts,\n          onFinish: function onFinish() {\n            return _this2.setState({\n              fontsLoaded: true\n            });\n          },\n          onError: console.warn,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }\n        });\n      }\n\n      return React.createElement(EntryNavigator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 4\n        }\n      });\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\nexport default App;","map":{"version":3,"sources":["/Users/ikramgabiyev/react-native-workspace/loundr/App.js"],"names":["React","Component","EntryNavigator","AppLoading","Font","fetchFonts","loadAsync","require","App","state","fontsLoaded","setState","console","warn","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;AAIA,OAAOC,cAAP;AAIA,SAASC,UAAT,QAA2B,MAA3B;AAGA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;AAOA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACrB,SAAOD,IAAI,CAACE,SAAL,CAAe;AAElB,wBAAoBC,OAAO,mDAFT;AAKlB,uBAAmBA,OAAO,kDALR;AAQlB,qBAAiBA,OAAO;AARN,GAAf,CAAP;AAUH,CAXD;;IAgBMC,G;;;;;;;;;;;;;;;UAEFC,K,GAAQ;AAEJC,MAAAA,WAAW,EAAE;AAFT,K;;;;;;6BAMR;AAAA;;AAKI,UAAI,CAAC,KAAKD,KAAL,CAAWC,WAAhB,EACA;AACI,eACI,oBAAC,UAAD;AACI,UAAA,UAAU,EAAEL,UADhB;AAEI,UAAA,QAAQ,EAAE;AAAA,mBAAM,MAAI,CAACM,QAAL,CAAc;AAAED,cAAAA,WAAW,EAAE;AAAf,aAAd,CAAN;AAAA,WAFd;AAGI,UAAA,OAAO,EAAEE,OAAO,CAACC,IAHrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;AAEP,aACC,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADD;AAGA;;;;EA3BgBZ,S;;AA8BlB,IAAMa,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAChCC,EAAAA,SAAS,EAAE;AACVC,IAAAA,IAAI,EAAE,CADI;AAEVC,IAAAA,eAAe,EAAE,MAFP;AAGVC,IAAAA,UAAU,EAAE,QAHF;AAIVC,IAAAA,cAAc,EAAE;AAJN;AADqB,CAAlB,CAAf;AASA,eAAeb,GAAf","sourcesContent":["//standard imports\nimport React, { Component } from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\n\n//importing the entry navigator\nimport EntryNavigator from './navigation/EntryNavigator';\n\n//importing AppLoading\n//currently for uploading files in the render() in [App.js]\nimport { AppLoading } from 'expo';\n\n//importing font package\nimport * as Font from 'expo-font';\n\n/**\n * fetches all fonts;\n * returns a promise;\n * put as a prop into AppLoading component\n */\nconst fetchFonts = () => {\n    return Font.loadAsync({\n        //use this mostly\n        'mont-alt-regular': require('./assets/fonts/MontserratAlternates-Regular.ttf'),\n\n        //use this for subTitles or when regular is too thin\n        'mont-alt-medium': require('./assets/fonts/MontserratAlternates-Medium.ttf'),\n\n        //use this for titles\n        'mont-alt-bold': require('./assets/fonts/MontserratAlternates-Bold.ttf'),\n    });\n};\n\n/**\n * Here we will have the main SwitchNavigator rendered\n */\nclass App extends Component \n{\n    state = {\n        //checks if fonts loaded\n        fontsLoaded: false,\n    };\n\n    render() \n    {\n        /**\n         * render AppLoading screen if \n         * fonts are still not loaded\n         */\n        if (!this.state.fontsLoaded)\n        {\n            return (\n                <AppLoading\n                    startAsync={fetchFonts}\n                    onFinish={() => this.setState({ fontsLoaded: true })}\n                    onError={console.warn}\n                />\n            );\n        }\n\n\t\treturn (\n\t\t\t<EntryNavigator />\n\t\t);\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#fff',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center',\n\t},\n});\n\nexport default App;"]},"metadata":{},"sourceType":"module"}