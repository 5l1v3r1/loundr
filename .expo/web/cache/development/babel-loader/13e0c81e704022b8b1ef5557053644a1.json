{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"/Users/ikramgabiyev/react-native-workspace/loundr/App.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport EntryNavigator from \"./navigation/EntryNavigator\";\nimport { AppLoading } from \"expo\";\nimport * as Font from \"expo-font\";\n\nvar fetchFonts = function fetchFonts() {\n  return Font.loadAsync({\n    \"mont-alt-regular\": require(\"./assets/fonts/MontserratAlternates-Regular.ttf\"),\n    \"mont-alt-medium\": require(\"./assets/fonts/MontserratAlternates-Medium.ttf\"),\n    \"mont-alt-bold\": require(\"./assets/fonts/MontserratAlternates-Bold.ttf\")\n  });\n};\n\nvar App = function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  function App() {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n    _this.state = {\n      fontsLoaded: false\n    };\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      if (!this.state.fontsLoaded) {\n        return React.createElement(AppLoading, {\n          startAsync: fetchFonts,\n          onFinish: function onFinish() {\n            return _this2.setState({\n              fontsLoaded: true\n            });\n          },\n          onError: console.warn,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 9\n          }\n        });\n      }\n\n      return React.createElement(React.Fragment, null, React.createElement(EntryNavigator, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 9\n        }\n      }), React.createElement(StatusBar, {\n        barStyle: \"light-content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\"\n  }\n});\nexport default App;","map":{"version":3,"sources":["/Users/ikramgabiyev/react-native-workspace/loundr/App.js"],"names":["React","Component","EntryNavigator","AppLoading","Font","fetchFonts","loadAsync","require","App","state","fontsLoaded","setState","console","warn","styles","StyleSheet","create","container","flex","backgroundColor","alignItems","justifyContent"],"mappings":";;;;;;;;;;;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;AAIA,OAAOC,cAAP;AAIA,SAASC,UAAT,QAA2B,MAA3B;AAGA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;;AAOA,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AACvB,SAAOD,IAAI,CAACE,SAAL,CAAe;AAEpB,wBAAoBC,OAAO,mDAFP;AAKpB,uBAAmBA,OAAO,kDALN;AAQpB,qBAAiBA,OAAO;AARJ,GAAf,CAAP;AAUD,CAXD;;IAgBMC,G;;;;;;;;;;;;;;;UACJC,K,GAAQ;AAENC,MAAAA,WAAW,EAAE;AAFP,K;;;;;;6BAKC;AAAA;;AAKP,UAAI,CAAC,KAAKD,KAAL,CAAWC,WAAhB,EAA6B;AAC3B,eACE,oBAAC,UAAD;AACE,UAAA,UAAU,EAAEL,UADd;AAEE,UAAA,QAAQ,EAAE;AAAA,mBAAM,MAAI,CAACM,QAAL,CAAc;AAAED,cAAAA,WAAW,EAAE;AAAf,aAAd,CAAN;AAAA,WAFZ;AAGE,UAAA,OAAO,EAAEE,OAAO,CAACC,IAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;AAED,aACE,0CACE,oBAAC,cAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,SAAD;AAAW,QAAA,QAAQ,EAAC,eAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,CADF;AAMD;;;;EA3BeZ,S;;AA8BlB,IAAMa,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,SAAS,EAAE;AACTC,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,eAAe,EAAE,MAFR;AAGTC,IAAAA,UAAU,EAAE,QAHH;AAITC,IAAAA,cAAc,EAAE;AAJP;AADoB,CAAlB,CAAf;AASA,eAAeb,GAAf","sourcesContent":["//standard imports\nimport React, { Component } from \"react\";\nimport { StyleSheet, StatusBar } from \"react-native\";\n\n//importing the entry navigator\nimport EntryNavigator from \"./navigation/EntryNavigator\";\n\n//importing AppLoading\n//currently for uploading files in the render() in [App.js]\nimport { AppLoading } from \"expo\";\n\n//importing font package\nimport * as Font from \"expo-font\";\n\n/**\n * fetches all fonts;\n * returns a promise;\n * put as a prop into AppLoading component\n */\nconst fetchFonts = () => {\n  return Font.loadAsync({\n    //use this mostly\n    \"mont-alt-regular\": require(\"./assets/fonts/MontserratAlternates-Regular.ttf\"),\n\n    //use this for subTitles or when regular is too thin\n    \"mont-alt-medium\": require(\"./assets/fonts/MontserratAlternates-Medium.ttf\"),\n\n    //use this for titles\n    \"mont-alt-bold\": require(\"./assets/fonts/MontserratAlternates-Bold.ttf\"),\n  });\n};\n\n/**\n * Here we will have the main SwitchNavigator rendered\n */\nclass App extends Component {\n  state = {\n    //checks if fonts loaded\n    fontsLoaded: false,\n  };\n\n  render() {\n    /**\n     * render AppLoading screen if\n     * fonts are still not loaded\n     */\n    if (!this.state.fontsLoaded) {\n      return (\n        <AppLoading\n          startAsync={fetchFonts}\n          onFinish={() => this.setState({ fontsLoaded: true })}\n          onError={console.warn}\n        />\n      );\n    }\n\n    return (\n      <>\n        <EntryNavigator />\n        <StatusBar barStyle=\"light-content\" />\n      </>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: \"#fff\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n});\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}